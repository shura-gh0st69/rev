from z3 import *

# Create 32 symbolic byte variables
v4 = [BitVec(f'v4_{i}', 8) for i in range(32)]
s = Solver()

# All must be printable ASCII
for c in v4:
    s.add(c >= 32, c <= 126)

# Constraints from the C code
s.add(v4[29] == v4[5] - v4[3] + 70)
s.add(v4[22] + v4[2] == v4[13] + 123)
s.add(v4[4] + v4[12] == v4[5] + 28)
s.add(v4[23] * v4[25] == v4[17] + v4[0] + 23)
s.add(v4[1] * v4[27] == v4[22] + v4[5] - 21)
s.add(v4[13] * v4[9] == v4[3] * v4[28] - 9)
s.add(v4[9] == 112)
s.add(v4[21] + v4[19] == v4[6] + 0x80)
s.add(v4[16] == v4[15] - v4[11] + 48)
s.add(v4[27] * v4[7] == v4[13] * v4[1] + 45)
s.add(v4[13] == v4[13] + v4[18] - 101)
s.add(v4[20] - v4[8] == v4[9] + 124)
s.add(v4[31] == v4[8] - v4[31] - 121)
s.add(v4[31] * v4[20] == v4[20] + 4)
s.add(v4[24] - v4[17] == v4[8] + v4[21] - 23)
s.add(v4[5] + v4[7] == v4[29] + v4[5] + 44)
s.add(v4[10] * v4[12] == v4[1] - v4[11] - 36)
s.add(v4[0] * v4[31] == v4[26] - 27)
s.add(v4[20] + v4[1] == v4[10] - 125)
s.add(v4[18] == v4[14] + v4[27] + 2)
s.add(v4[11] * v4[30] == v4[21] + 68)
s.add(v4[19] * v4[5] == v4[1] - 44)
s.add(v4[13] - v4[26] == v4[21] - 127)
s.add(v4[23] == v4[29] - v4[0] + 88)
s.add(v4[19] == v4[13] * v4[8] - 23)
s.add(v4[22] + v4[6] == v4[3] + 83)
s.add(v4[12] == v4[7] + v4[26] - 114)
s.add(v4[16] == v4[18] - v4[5] + 51)
s.add(v4[30] - v4[8] == v4[29] - 77)
s.add(v4[20] - v4[11] == v4[3] - 76)
s.add(v4[16] - v4[7] == v4[17] + 102)
s.add(v4[21] + v4[1] == v4[18] + v4[11] + 43)

# Check for solution
if s.check() == sat:
    model = s.model()
    flag = ''.join([chr(model[c].as_long()) for c in v4])
    print(f"[+] License Found: {flag}")
else:
    print("[-] No solution found.")

# if ( strlen(a2[1]) == 32 )
#     {
    #       v4 = a2[1];
#       if ( v4[29] == v4[5] - v4[3] + 70
#         && v4[22] + v4[2] == v4[13] + 123
#         && v4[4] + v4[12] == v4[5] + 28
#         && v4[23] * v4[25] == v4[17] + *v4 + 23
#         && v4[1] * v4[27] == v4[22] + v4[5] - 21
#         && v4[13] * v4[9] == v4[3] * v4[28] - 9
#         && v4[9] == 112
#         && v4[21] + v4[19] == v4[6] + 0x80
#         && v4[16] == v4[15] - v4[11] + 48
#         && v4[27] * v4[7] == v4[13] * v4[1] + 45
#         && v4[13] == v4[13] + v4[18] - 101
#         && v4[20] - v4[8] == v4[9] + 124
#         && v4[31] == v4[8] - v4[31] - 121
#         && v4[31] * v4[20] == v4[20] + 4
#         && v4[24] - v4[17] == v4[8] + v4[21] - 23
#         && v4[5] + v4[7] == v4[29] + v4[5] + 44
#         && v4[10] * v4[12] == v4[1] - v4[11] - 36
#         && *v4 * v4[31] == v4[26] - 27
#         && v4[20] + v4[1] == v4[10] - 125
#         && v4[18] == v4[14] + v4[27] + 2
#         && v4[11] * v4[30] == v4[21] + 68
#         && v4[19] * v4[5] == v4[1] - 44
#         && v4[13] - v4[26] == v4[21] - 127
#         && v4[23] == v4[29] - *v4 + 88
#         && v4[19] == v4[13] * v4[8] - 23
#         && v4[22] + v4[6] == v4[3] + 83
#         && v4[12] == v4[7] + v4[26] - 114
#         && v4[16] == v4[18] - v4[5] + 51
#         && v4[30] - v4[8] == v4[29] - 77
#         && v4[20] - v4[11] == v4[3] - 76
#         && v4[16] - v4[7] == v4[17] + 102
#         && v4[21] + v4[1] == v4[18] + v4[11] + 43 )
#       {
    #         puts("License Correct");
#         return 0;
#       }